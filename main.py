import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters.command import Command
from aiogram.types import CallbackQuery, Message, KeyboardButton
from handlers.handler import new_quiz, get_question
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram import F
from data.questions import quiz_data
from databases.database import (create_table, update_quiz_index, get_quiz_index,
                                get_number_correct_answers, get_results, get_user_name)
from config.config import API_TOKEN
import pandas as pd

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


@dp.callback_query(F.data == "right_answer")
async def right_answer(callback: CallbackQuery):
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—å—é —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ (reply_markup=None)
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    print(callback.message.reply_markup)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await get_quiz_index(callback.from_user.id)
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    number_correct_answers = await get_number_correct_answers(callback.from_user.id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π
    for first_level in callback.message.reply_markup.inline_keyboard:
        if first_level[0].callback_data == 'right_answer':
            await callback.message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {first_level[0].text} - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!üëç")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    number_correct_answers += 1
    await update_quiz_index(callback.from_user.id, f"{callback.from_user.first_name} {callback.from_user.last_name}",
                            current_question_index, number_correct_answers)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –∫–æ–Ω–µ—Ü –∫–≤–∏–∑–∞
    if current_question_index < len(quiz_data):
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await get_question(callback.message, callback.from_user.id)
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫–≤–∏–∑–∞
        results = await get_results()
        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        df = pd.DataFrame(results, columns=['--------', '']).set_index(keys='--------')
        await callback.message.answer(f"<u><b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b></u>: <b>{df}</b>", parse_mode="HTML")


@dp.callback_query(F.data.split('/', maxsplit=1)[0] == "wrong_answer")
async def wrong_answer(callback: CallbackQuery):
    # —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–ª—å—é —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ (reply_markup=None)
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await get_quiz_index(callback.from_user.id)
    correct_option = quiz_data[current_question_index]['correct_option']
    opts = quiz_data[current_question_index]['options']
    callback_response = callback.data.split('/', maxsplit=1)[-1]
    for i in opts:
        if callback_response == i[-20:]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            await callback.message.answer(f"–í–∞—à –æ—Ç–≤–µ—Ç: {i} - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!üò°\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: "
                                          f"{quiz_data[current_question_index]['options'][correct_option]}")


    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    number_correct_answers = await get_number_correct_answers(callback.from_user.id)
    await update_quiz_index(callback.from_user.id, f"{callback.from_user.first_name} {callback.from_user.last_name}",
                            current_question_index, number_correct_answers)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –∫–æ–Ω–µ—Ü –∫–≤–∏–∑–∞
    if current_question_index < len(quiz_data):
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await get_question(callback.message, callback.from_user.id)
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫–≤–∏–∑–∞
        results = await get_results()
        await callback.message.answer("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        df = pd.DataFrame(results, columns=['--------', '']).set_index(keys='--------')
        await callback.message.answer(f"<u><b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b></u>: <b>{df}</b>", parse_mode="HTML")


@dp.message(F.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É")
@dp.message(Command("quiz"))
async def cmd_quiz(message: Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    await message.answer(f"–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∫–≤–∏–∑!")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫–≤–∏–∑
    await new_quiz(message)


@dp.message(Command("start"))
async def cmd_start(message: Message):
    # –°–æ–∑–¥–∞–µ–º —Å–±–æ—Ä—â–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Ç–∏–ø–∞ Reply
    builder = ReplyKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–±–æ—Ä—â–∏–∫ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
    builder.add(KeyboardButton(text="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"))
    # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name} {message.from_user.last_name}!",
                         reply_markup=builder.as_markup(resize_keyboard=True))


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await create_table()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
